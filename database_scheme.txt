# Words table

cursor.execute("""

CREATE TABLE IF NOT EXISTS words (

id INTEGER PRIMARY KEY AUTOINCREMENT,

term TEXT NOT NULL UNIQUE,

definition TEXT,

audio_data BLOB,

generated_status BOOLEAN NOT NULL DEFAULT FALSE

);

""" )

# Examples table (original sentences)

cursor.execute("""

CREATE TABLE IF NOT EXISTS examples (

id INTEGER PRIMARY KEY AUTOINCREMENT,

word_id INTEGER NOT NULL REFERENCES words(id) ON DELETE CASCADE,

audio_data BLOB,

text TEXT NOT NULL

);

""" )

# Conversation lines table (original dialogues)

cursor.execute("""

CREATE TABLE IF NOT EXISTS conversation_lines (

id INTEGER PRIMARY KEY AUTOINCREMENT,

word_id INTEGER NOT NULL REFERENCES words(id) ON DELETE CASCADE,

speaker_label TEXT NOT NULL,

line_order INTEGER NOT NULL,

audio_data BLOB,

text TEXT NOT NULL

);

""" )

cursor.execute("""

CREATE TABLE IF NOT EXISTS words_translations (

id INTEGER PRIMARY KEY AUTOINCREMENT,

words_id INTEGER NOT NULL REFERENCES words(id) ON DELETE CASCADE,

language_code TEXT NOT NULL,

translation TEXT NOT NULL

);

""" )

# Translations for examples

cursor.execute("""

CREATE TABLE IF NOT EXISTS example_translations (

id INTEGER PRIMARY KEY AUTOINCREMENT,

example_id INTEGER NOT NULL REFERENCES examples(id) ON DELETE CASCADE,

language_code TEXT NOT NULL,

translation TEXT NOT NULL

);

""" )

# Translations for conversation lines

cursor.execute("""

CREATE TABLE IF NOT EXISTS conversation_line_translations (

id INTEGER PRIMARY KEY AUTOINCREMENT,

conversation_line_id INTEGER NOT NULL REFERENCES conversation_lines(id) ON DELETE CASCADE,

language_code TEXT NOT NULL,

translation TEXT NOT NULL

);

""" )

# Clips table

cursor.execute("""

CREATE TABLE IF NOT EXISTS clips (

id INTEGER PRIMARY KEY AUTOINCREMENT,

word_id INTEGER NOT NULL REFERENCES words(id) ON DELETE CASCADE,

youtube_url TEXT NOT NULL,

start_sec INTEGER NOT NULL

);

""" )

# Fill-in-the-blank exercises table

cursor.execute("""

CREATE TABLE IF NOT EXISTS fill_in_blank_exercises (

id INTEGER PRIMARY KEY AUTOINCREMENT,

word_id INTEGER NOT NULL REFERENCES words(id) ON DELETE CASCADE,

sentence TEXT NOT NULL,

distractor_words_json TEXT NOT NULL -- Stores a JSON array of strings

);

""")

# Fill-in-conversation exercises table

cursor.execute("""

CREATE TABLE IF NOT EXISTS fill_in_conversation_exercises (

id INTEGER PRIMARY KEY AUTOINCREMENT,

word_id INTEGER NOT NULL REFERENCES words(id) ON DELETE CASCADE,

conversation_json TEXT NOT NULL, -- Stores a JSON array of conversation turns

distractor_words_json TEXT NOT NULL -- Stores a JSON array of strings

);

""")

# Modules table for organizing words into thematic groups

cursor.execute("""

CREATE TABLE IF NOT EXISTS modules (

id INTEGER PRIMARY KEY AUTOINCREMENT,

name TEXT NOT NULL UNIQUE,

description TEXT,

llm_prompt_topic TEXT -- Optional: The topic/prompt given to the LLM

);

""")

# Word-Module Assignments table (linking table for many-to-many relationship)

cursor.execute("""

CREATE TABLE IF NOT EXISTS word_module_assignments (

word_id INTEGER NOT NULL,

module_id INTEGER NOT NULL,

FOREIGN KEY (word_id) REFERENCES words(id) ON DELETE CASCADE,

FOREIGN KEY (module_id) REFERENCES modules(id) ON DELETE CASCADE,

PRIMARY KEY (word_id, module_id)

);

""")